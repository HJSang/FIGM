// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _FIGM_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// FIMV
vec FIMV(mat s, vec q, int iter, int m);
RcppExport SEXP _FIGM_FIMV(SEXP sSEXP, SEXP qSEXP, SEXP iterSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(FIMV(s, q, iter, m));
    return rcpp_result_gen;
END_RCPP
}
// FIGMM
List FIGMM(mat& s, vec q, int iter, int m, int G, mat& mu0, mat& S0, vec& prop);
RcppExport SEXP _FIGM_FIGMM(SEXP sSEXP, SEXP qSEXP, SEXP iterSEXP, SEXP mSEXP, SEXP GSEXP, SEXP mu0SEXP, SEXP S0SEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< mat& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< vec& >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(FIGMM(s, q, iter, m, G, mu0, S0, prop));
    return rcpp_result_gen;
END_RCPP
}
// FIGMMS
List FIGMMS(mat& s, vec q, int iter, int m, int G, mat& mu0, mat& S0, vec& prop);
RcppExport SEXP _FIGM_FIGMMS(SEXP sSEXP, SEXP qSEXP, SEXP iterSEXP, SEXP mSEXP, SEXP GSEXP, SEXP mu0SEXP, SEXP S0SEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< mat& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< vec& >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(FIGMMS(s, q, iter, m, G, mu0, S0, prop));
    return rcpp_result_gen;
END_RCPP
}
// FIGMM2
List FIGMM2(mat& s, vec q, int iter, int m, int G, mat& mu0, mat& S0, mat& prop);
RcppExport SEXP _FIGM_FIGMM2(SEXP sSEXP, SEXP qSEXP, SEXP iterSEXP, SEXP mSEXP, SEXP GSEXP, SEXP mu0SEXP, SEXP S0SEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< mat& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< mat& >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(FIGMM2(s, q, iter, m, G, mu0, S0, prop));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FIGM_mvrnormArma", (DL_FUNC) &_FIGM_mvrnormArma, 3},
    {"_FIGM_FIMV", (DL_FUNC) &_FIGM_FIMV, 4},
    {"_FIGM_FIGMM", (DL_FUNC) &_FIGM_FIGMM, 8},
    {"_FIGM_FIGMMS", (DL_FUNC) &_FIGM_FIGMMS, 8},
    {"_FIGM_FIGMM2", (DL_FUNC) &_FIGM_FIGMM2, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_FIGM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
